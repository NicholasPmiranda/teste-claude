# Guia de Regras para Desenvolvimento Laravel

## Parâmetros Personalizáveis por Projeto
- **Biblioteca de UI Frontend**: Pode ser personalizada entre shadcn/vue (padrão), Prime Vue ou Vuetify
- **Estilo CSS**: Tailwind CSS (padrão)
- **Framework Frontend**: Vue.js (padrão)

## Regras Fundamentais
- Sempre usar **FormRequest** para validação
- Criar FormRequests individuais para cada operação: Create, Update e Delete
- Sempre usar `::create()` para criar modelos e nunca `new Model()`
- Nunca reutilizar o mesmo FormRequest para diferentes operações

## 1. Code Style
### Convenções de Nomenclatura
- **Variáveis**: sempre usar snake_case
- **Métodos**: sempre usar camelCase
- **Classes**: sempre iniciar com letra maiúscula
- **Nomes**: usar sempre nomes descritivos que indiquem claramente a função

### Classes Estáticas e Tipagem
- **Classes de Serviço**: sempre criar como classes estáticas
- **Tipagem de Parâmetros**: sempre tipar todos os parâmetros e retornos

## 2. Arquitetura de Pastas
### Estrutura Principal
- Organizar Controllers, Requests, Models e Services em subpastas por contexto
- Criar FormRequests específicos para cada operação (Create/Update/Delete)

### Serviços
- Todos os serviços devem ficar dentro da pasta `/app/Services`
- Cada funcionalidade deve ter seu próprio serviço, dividindo ao máximo
- Cada serviço deve ter responsabilidade única

### Agrupamento de Componentes
- Componentes relacionados devem ficar em pastas correspondentes
- Exemplo: Models, Controllers e Requests de Blog ficam em subpastas chamadas Blog

## 3. Pacotes Padrões Laravel
### Autenticação
- Sempre usar Laravel Sanctum para autenticação e APIs

### Gerenciamento de Permissões
- Sempre usar Spatie Permissions para controle de acesso

### Exportação de Planilhas
- Sempre usar Laravel Excel para exportação/importação de planilhas
- Criar views dedicadas para exportação dentro da pasta resources/views/excel

### Geração de PDFs
- Usar LaravelDomPDF para geração de PDFs

## 4. Frontend
### Tecnologias
- **Framework**: Vue.js
- **CSS**: Tailwind CSS
- **Biblioteca de UI**: Definida por projeto (shadcn/vue, Prime Vue ou Vuetify)

### Regras para Componentes Frontend
- **Nunca adicionar estilos extras** que não sejam da biblioteca de UI escolhida
- **Sempre usar os componentes existentes** da biblioteca de UI selecionada
- Componentes devem ser funcionais sem adicionar estilização personalizada

### Organização de Componentes
- Sempre dividir a interface em componentes mesmo que não sejam reutilizados
- Criar componentes por contexto ou responsabilidade

## 5. Testes
- Sempre usar Pest PHP para testes
- Criar testes de feature para todas as funcionalidades
- Cada endpoint deve ter pelo menos um teste de feature correspondente
- Priorizar cobertura de teste para os fluxos críticos da aplicação
- Seguir a estrutura de pastas padrão do Pest para organização dos testes

